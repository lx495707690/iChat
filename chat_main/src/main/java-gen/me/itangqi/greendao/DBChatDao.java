package me.itangqi.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBCHAT".
*/
public class DBChatDao extends AbstractDao<DBChat, Long> {

    public static final String TABLENAME = "DBCHAT";

    /**
     * Properties of entity DBChat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property My_userId = new Property(1, String.class, "my_userId", false, "MY_USER_ID");
        public final static Property ChannalId = new Property(2, String.class, "channalId", false, "CHANNAL_ID");
        public final static Property Friend_userId = new Property(3, String.class, "friend_userId", false, "FRIEND_USER_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Message = new Property(5, String.class, "message", false, "MESSAGE");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property Receive_message_date = new Property(7, String.class, "receive_message_date", false, "RECEIVE_MESSAGE_DATE");
        public final static Property ImgUrl = new Property(8, String.class, "imgUrl", false, "IMG_URL");
        public final static Property UnReadNum = new Property(9, String.class, "unReadNum", false, "UN_READ_NUM");
    };


    public DBChatDao(DaoConfig config) {
        super(config);
    }
    
    public DBChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBCHAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MY_USER_ID\" TEXT NOT NULL ," + // 1: my_userId
                "\"CHANNAL_ID\" TEXT NOT NULL ," + // 2: channalId
                "\"FRIEND_USER_ID\" TEXT NOT NULL ," + // 3: friend_userId
                "\"NAME\" TEXT NOT NULL ," + // 4: name
                "\"MESSAGE\" TEXT NOT NULL ," + // 5: message
                "\"DATE\" TEXT NOT NULL ," + // 6: date
                "\"RECEIVE_MESSAGE_DATE\" TEXT," + // 7: receive_message_date
                "\"IMG_URL\" TEXT NOT NULL ," + // 8: imgUrl
                "\"UN_READ_NUM\" TEXT NOT NULL );"); // 9: unReadNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBCHAT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBChat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMy_userId());
        stmt.bindString(3, entity.getChannalId());
        stmt.bindString(4, entity.getFriend_userId());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getMessage());
        stmt.bindString(7, entity.getDate());
 
        String receive_message_date = entity.getReceive_message_date();
        if (receive_message_date != null) {
            stmt.bindString(8, receive_message_date);
        }
        stmt.bindString(9, entity.getImgUrl());
        stmt.bindString(10, entity.getUnReadNum());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBChat readEntity(Cursor cursor, int offset) {
        DBChat entity = new DBChat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // my_userId
            cursor.getString(offset + 2), // channalId
            cursor.getString(offset + 3), // friend_userId
            cursor.getString(offset + 4), // name
            cursor.getString(offset + 5), // message
            cursor.getString(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // receive_message_date
            cursor.getString(offset + 8), // imgUrl
            cursor.getString(offset + 9) // unReadNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBChat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMy_userId(cursor.getString(offset + 1));
        entity.setChannalId(cursor.getString(offset + 2));
        entity.setFriend_userId(cursor.getString(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setMessage(cursor.getString(offset + 5));
        entity.setDate(cursor.getString(offset + 6));
        entity.setReceive_message_date(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImgUrl(cursor.getString(offset + 8));
        entity.setUnReadNum(cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBChat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBChat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
